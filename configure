#!/bin/bash
# retrieve Rcpp and R include and link directories
# R_DIR=(set by the user from command line)
RCPP_INCLUDE_DIR=`${R_DIR}Rscript -e 'Rcpp:::CxxFlags()'`
RCPP_LIB_DIR=`${R_DIR}Rscript -e 'Rcpp:::LdFlags()'`
R_INCLUDE_DIR=`${R_DIR}R CMD config --cppflags`
R_LIB_DIR=`${R_DIR}R CMD config --ldflags`
RLDPATH=`pwd`/src/ANTS/ANTS-build/lib/
export R_LD_LIBRARY_PATH="${R_LD_LIBRARY_PATH}:${RLDPATH}"
cd ./src
# ANTS_DIR=(set by the user from command line)
# ITK_DIR=(set by the user from command line)
cmake  -D ANTS_DIR:PATH="$ANTS_DIR" -D ITK_DIR:PATH="$ITK_DIR" -D RCPP_INCLUDE_DIR:PATH="$RCPP_INCLUDE_DIR" -D RCPP_LIB_DIR:PATH="$RCPP_LIB_DIR" -D R_INCLUDE_DIR:PATH="$R_INCLUDE_DIR" -D R_LIB_DIR:PATH="$R_LIB_DIR" -D CMAKE_BUILD_TYPE:STRING="${CMAKE_BUILD_TYPE}" -D R_LD_LIBRARY_PATH:PATH="${R_LD_LIBRARY_PATH}" .
#
#
# currently requires export R_LD_LIBRARY_PATH  in order to install ANTsR  or call ANTsR from w/in R
# possible fixes 
# 1. copy ANTsR dylib's into the R framework/lib directory see .libPaths() in R
# 2. http://cran.r-project.org/doc/manuals/r-devel/R-exts.html says means that each user does not have to set the value of the LD_LIBRARY_PATH (or equivalent) environment variable, but that the secondary object is automatically resolved.  --- but am not sure how to do this yet 
# 3. modify or create a specific ANTsR ldpath.in file ....
# or see discusssion on src/install.libs.R here: http://cran.r-project.org/doc/manuals/r-devel/R-exts.html#Configure-example
# ... is possible that, somewhere in install, you could copy all the files that are dylibs to the .libPaths() 
#  using system.files(package="ANTsR") and sys.glob you can find these files easily ...
#  or maybe just from within cmake ... 
#   or here
#
# /Library/Frameworks/R.framework/Versions/Current/Resources/lib/
#
RHOME=`R RHOME`
DYLIB_EXT=`R CMD config DYLIB_EXT`
mylibpath=`R CMD config LIBnn `
for x  in ${RLDPATH}/*${DYLIB_EXT} ; do
  cp $x  ${RHOME}/${mylibpath}/
done
