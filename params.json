{"name":"Antsr","tagline":"...","body":"# ANTsR\r\n\r\n[![Build Status](https://travis-ci.org/stnava/ANTsR.png?branch=master)](https://travis-ci.org/stnava/ANTsR)\r\n\r\nAn R package providing [ANTs](http://stnava.github.io/ANTs/) and [ITK](https://github.com/InsightSoftwareConsortium/ITK) features in R.\r\n\r\nOriginal Authors: Shrinidhi KL,  Avants BB\r\n\r\n\r\n\r\n## Easiest installation approach (from within R)\r\n```\r\nlibrary( devtools )\r\ninstall_github(\"stnava/ANTsR\")\r\n```\r\n\r\nthis assumes you have [cmake](http://www.cmake.org/download/) installed / accessible in your environment\r\n\r\nwindows users should see [Rtools](http://cran.r-project.org/bin/windows/Rtools/) and maybe, also, [installr](https://github.com/talgalili/installr) for assistance in setting up their environment for building (must have a compiler too)\r\n\r\n## Installation from source\r\nsee [install from source](http://stnava.github.io/software/2014/01/08/antsr/)\r\n\r\nFirst, clone the repository:\r\n```sh\r\n$ git clone https://github.com/stnava/ANTsR.git\r\n```\r\n\r\nInstall the package as follows:\r\n```sh\r\n$ R CMD INSTALL ANTsR\r\n```\r\n\r\n## Installation using Homebrew\r\n\r\n* Install homebrew\r\n```\r\nruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\r\n```\r\n\r\n* Install cmake\r\n```\r\nbrew install cmake\r\n```\r\n\r\n* Install zlib and wget, if necessary\r\n```\r\nbrew install wget\r\n```\r\n```\r\nbrew tap homebrew/dupes\r\n```\r\n```\r\nbrew install zlib\r\n```\r\n\r\n* Edit zlib path in ANTsR/src/ANTS/ANTS-build/CMakeCache.txt file:  \r\n```\r\nZLIB_INCLUDE_DIR:PATH=/usr/local/Cellar/zlib/1.2.8/include\r\n```\r\n\r\n* Possible errors\r\n\r\n```\r\nError: make: llvm-g++-4.2: No such file or directory, Error: /bin/sh: llvm-g++-4.2: command not found\r\n```\r\nSolution:  In file: /Library/Frameworks/R.framework/Versions/3.0/Resources/etc/Makeconf\r\n\r\nFind: llvm-g++-4.2\r\n\r\nReplace with: g++\r\n\r\n```\r\nWarning: cmake-3.1.0 already installed, it's just not linked\r\n```\r\nSolution:\r\n```\r\nbrew link --overwrite cmake\r\n```\r\n\r\n\r\n\r\n### Binaries\r\nThese are still under development; use at your own discretion.\r\n\r\n * [Mac OS X](https://dl.dropboxusercontent.com/u/9717050/ANTsR_osx_1.0.tgz)\r\n * [RHEL](https://dl.dropboxusercontent.com/u/9717050/ANTsR_1.0_R_x86_64-redhat-linux-gnu.tar.gz)\r\n * [Other Linux](https://dl.dropboxusercontent.com/u/9717050/ANTsR_1.0_R_x86_64-pc-linux-gnu.tar.gz)\r\n\r\n\r\n### R dependencies\r\nYou may need to install R packages that ANTsR requires. For example:\r\n```\r\ninstall.packages(pkgs = c(\"Rcpp\", \"tools\", \"methods\"), dependencies = TRUE);\r\n```\r\nThese dependencies are subject to change until development is stable.\r\nYou can gain additional functionality by installing packages that\r\nare listed in the [`DESCRIPTION` file](https://github.com/stnava/ANTsR/blob/master/DESCRIPTION) under `Suggests`.\r\n\r\nThe [`travis.yml` file](https://github.com/stnava/ANTsR/blob/master/.travis.yml) also shows a way to install from Linux command line.\r\n\r\n## Usage\r\nLoad the package:\r\n```\r\nlibrary(ANTsR)\r\n```\r\nList the available functions in the namespace ANTsR:\r\n```\r\nANTsR::<double-tab>\r\n```\r\n\r\nCall help on a function via ?functionName or see function arguments\r\nvia  `args(functionName)`\r\n\r\n## Overview of ANTsR functionality and useful tools\r\n\r\nIf nothing else, ANTsR makes it easy to read and write medical images\r\nand to map them into a format compatible with R.\r\n\r\n**Read, write, access an image**\r\n```\r\nmnifilename<-getANTsRData(\"mni\")\r\ndimension<-3\r\nimg<-antsImageRead(mnifilename,dimension)\r\nantsImageWrite(img,mnifilename)\r\nantsGetSpacing(img)\r\nantsGetDirection(img)\r\nantsGetOrigin(img)\r\nprint(antsGetPixels(img,50,60,44))\r\nprint(max(img))\r\n```\r\n\r\n**Index an image with a label**\r\n```\r\ngaussimg<-array( data=rnorm(125), dim=c(5,5,5))\r\narrayimg<-array( data=(1:125), dim=c(5,5,5))\r\nimg<-as.antsImage( arrayimg )\r\nprint( max(img) )\r\nprint( mean(img[ img > 50  ]))\r\nprint( max(img[ img >= 50 & img <= 99  ]))\r\nprint( mean( gaussimg[ img >= 50 & img <= 99  ]) )\r\n```\r\n\r\n**Convert a 4D image to a matrix**\r\n```\r\ngaussimg<-array( data=rnorm(125*10), dim=c(5,5,5,10))\r\ngaussimg<-as.antsImage(gaussimg)\r\nprint(dim(gaussimg))\r\nmask<-getAverageOfTimeSeries( gaussimg )\r\nvoxelselect <- mask < 0\r\nmask[ voxelselect  ]<-0\r\nmask[ !voxelselect  ]<-1\r\ngmat<-timeseries2matrix( gaussimg, mask )\r\nprint(dim(gmat))\r\n```\r\n\r\n**Convert a list of images to a matrix**\r\n```\r\nnimages<-100\r\nilist<-list()\r\nfor ( i in 1:nimages )\r\n{\r\n  simimg<-array( data=rnorm(2500), dim=c(50,50))\r\n  simimg<-as.antsImage( simimg )\r\n  SmoothImage(simimg,1.5,simimg)\r\n  ilist[i]<-simimg\r\n}\r\n# get a mask from the first image\r\nmask<-getMask( ilist[[1]],\r\n  lowThresh=mean(ilist[[1]]), cleanup=TRUE )\r\nmat<-imageListToMatrix( ilist, mask )\r\nprint(dim(mat))\r\n```\r\n\r\n**Do fast statistics on a big matrix**\r\n```\r\nmat<-imageListToMatrix( ilist, mask )\r\nage<-rnorm( nrow(mat) ) # simulated age\r\ngender<-rep( c(\"F\",\"M\"), nrow(mat)/2 ) # simulated gender\r\n# this creates \"real\" but noisy effects to detect\r\nmat<-mat*(age^2+rnorm(nrow(mat)))\r\nmdl<-lm( mat ~ age + gender )\r\nmdli<-bigLMStats( mdl, 1.e-4 )\r\nprint(names(mdli))\r\nprint(rownames(mdli$beta.t))\r\nprint(paste(\"age\",min(p.adjust(mdli$beta.pval[1,]))))\r\nprint(paste(\"gen\",min(p.adjust(mdli$beta.pval[2,]))))\r\n```\r\n\r\n\r\n**Write out a statistical map**\r\n```\r\nagebetas<-antsImageClone( mask )\r\nagebetas[ mask == 1 ]<-mdli$beta.t[1,]\r\nantsImageWrite( agebetas, 'agebetas.nii.gz' )\r\n```\r\n\r\n**Neighborhood operations**\r\n\r\n```\r\nmnit<-getANTsRData(\"mni\")\r\nmnit<-antsImageRead(mnit,3)\r\nmnit <- resampleImage( mnit , rep(4, mnit@dimension) )\r\nmask<-getMask(mnit,lowThresh=mean(mnit),cleanup=TRUE)\r\nradius <- rep(2,mnit@dimension)\r\nmat<-antsGetNeighborhoodMatrix(mnit,mask,radius,\r\n  physical.coordinates = FALSE,\r\n  boundary.condition = \"mean\" )\r\n```\r\n\r\n\r\n**Eigenanatomy & SCCAN**\r\n```\r\n# assume you ran the neighborhood example above\r\neanat<-sparseDecom( mat, mask, 0.05, 20, cthresh=250 )\r\neseg<-eigSeg(mask,eanat$eig,F)\r\njeanat<-joinEigenanatomy(mat,mask,eanat$eig, c(0.1))\r\n# see our paper in the journal \"methods\"\r\neseg2<-eigSeg(mask,jeanat$fusedlist,F)\r\n```\r\n\r\n```\r\n?sparseDecom\r\n?sparseDecom2\r\n?initializeEigenanatomy\r\n```\r\nSee [sccan tutorial](http://stnava.github.io/sccanTutorial/)\r\n\r\n**Other useful tools**\r\n```\r\n?ImageMath\r\n?ThresholdImage\r\n?quantifyCBF\r\n?antsPreprocessfMRI\r\n?aslPerfusion\r\n?computeDVARS\r\n?getROIValues\r\n?hemodynamicRF\r\n?inspectImageData3D\r\n?makeGraph\r\n?matrixToImages\r\n?plotANTsImage\r\n?antsRegistration\r\n?plotPrettyGraph\r\n?plotBasicNetwork\r\n?getTemplateCoordinates\r\n?antsSet*\r\n```\r\n\r\nAll of `ImageMath` from ANTs is accessible too\r\n```\r\nImageMath(3,threshimg,'ClusterThresholdVariate',threshimg,mask,5)\r\n```\r\n\r\nfor more fMRI focused tools, see [RKRNS](http://stnava.github.io/RKRNS/) and its\r\ngithub site [github RKRNS](https://github.com/stnava/RKRNS).\r\n\r\nA good visualization alternative is [antsSurf](https://github.com/stnava/antsSurf).\r\n\r\n## Direct access to ANTs tools\r\n\r\nAlternatively, one can use any function in the namespace by providing arguments exactly same as one provides to the corresponding command-line version.\r\n\r\nFor example, to call the antsRegistration routine:\r\n```\r\nANTsR::antsRegistration( \"-d\", \"2\", \"-m\", \"mi[r16slice.nii.gz,r64slice.nii.gz,1,20,Regular,0.05]\", \"-t\", \"affine[1.0]\", \"-c\", \"2100x1200x1200x0\", \"-s\", \"3x2x1x0\", \"-f\", \"4x3x2x1\",\"-u\", \"1\", \"-o\", \"[xtest,xtest.nii.gz,xtest_inv.nii.gz]\" )\r\n\r\nANTsR::antsRegistration( \"-d\", \"2\", \"-m\", \"mi[r16slice.nii.gz,r64slice.nii.gz,1,20,Regular,0.05]\", \"-t\", \"affine[1.0]\", \"-c\", \"2100x1200x1200x0\", \"-s\", \"3x2x1x0\", \"-f\", \"4x3x2x1\", \"-m\", \"cc[r16slice.nii.gz,r64slice.nii.gz,1,4]\", \"-t\", \"syn[5.0,3,0.0]\", \"-i\", \"100x100x0\", \"-s\", \"2x1x0\", \"-f\", \"3x2x1\", \"-u\", \"1\", \"-o\", \"[xtest,xtest.nii.gz,xtest_inv.nii.gz]\" )\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}