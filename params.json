{"name":"Antsr","tagline":"...","body":"# ANTsR\r\n\r\n[![Build Status](https://travis-ci.org/stnava/ANTsR.png?branch=master)](https://travis-ci.org/stnava/ANTsR) [![Coverage Status](https://coveralls.io/repos/stnava/ANTsR/badge.svg)](https://coveralls.io/r/stnava/ANTsR)\r\n\r\nAn R package providing [ANTs](http://stnava.github.io/ANTs/) features in R.\r\n\r\n## Description\r\n\r\nVersion: 0.3\r\n\r\nLicense: GPL (>=2)\r\n\r\nDepends:\tR (â‰¥ 3.0), methods\r\n\r\nImports:\tRcpp, tools, magrittr\r\n\r\nLinkingTo:\tRcpp, ITKR\r\n\r\nAuthor:\tBrian B. Avants, Benjamin M. Kandel, Jeff T. Duda, Philip A. Cook, Nicholas J. Tustison\r\n\r\nMaintainer:\t[Brian B. Avants](http://stnava.github.io/)\r\n\r\nURL:\t[homepage](http://stnava.github.io/ANTsR/)\r\n\r\nBugReports: [github issues](http://github.com/stnava/ANTsR/issues)\r\n\r\nNeedsCompilation:\tyes\r\n\r\nTravis checks:\t[ANTsR results](https://travis-ci.org/stnava/ANTsR)\r\n\r\n## Downloads\r\n\r\nReference manual:\t[ANTsR.pdf](https://github.com/stnava/ANTsR/releases/download/v0.3/ANTsR-manual.pdf)\r\n\r\nVignettes:\r\n\r\n*\t[ANTsR](http://htmlpreview.github.io/?https://github.com/stnava/ANTsDoc/blob/master/html/ANTsR.html)\r\n\r\n* [iMath](http://htmlpreview.github.io/?https://github.com/stnava/ANTsDoc/blob/master/html/iMath.html)\r\n\r\nWiki: [Notes and work in progress examples](https://github.com/stnava/ANTsR/wiki)\r\n\r\nPackage source:\t[from github](https://github.com/stnava/ANTsR/zipball/master)\r\n\r\nOS X Mavericks, Yosemite binaries:\t[OSX](https://github.com/stnava/ANTsR/releases/download/v0.3/ANTsR_OSX_0.3.tgz)\r\n\r\nUbuntu binaries: [Ubuntu](https://github.com/stnava/ANTsR/releases/download/v0.3/ANTsR_1.0_R_x86_64-pc-linux-gnu.tar.gz)\r\n\r\nWe are working toward Windows binaries.\r\n\r\n\r\n## Research using ANTsR\r\n\r\n* [Inter-modality inference](http://www.ncbi.nlm.nih.gov/pubmed/25449745) yet to be added RIPMMARC\r\n\r\n* [Eigenanatomy for multiple modality population studies](http://www.ncbi.nlm.nih.gov/pubmed/25448483) function `sparseDecom`\r\n\r\n* [Tumor segmentation](http://www.ncbi.nlm.nih.gov/pubmed/25433513) function `mrvnrfs` (not exactly the same but close)\r\n\r\n* [Multiple modality pediatric template and population study](http://www.nature.com/articles/sdata20153) employs several aspects of ANTsR\r\n\r\n* [Structural networks from subject-level data](http://www.ncbi.nlm.nih.gov/pubmed/25320792) function `makeGraph` plus yet to be added RIPMMARC\r\n\r\n* [SCCAN relating neuroimaging and cognitive batteries](http://www.ncbi.nlm.nih.gov/pmc/articles/PMC3911786/) function `sparseDecom2`\r\n\r\n* [Sparse regression with manifold smoothness constraints](http://www.ncbi.nlm.nih.gov/pubmed/24683960) function `sparseRegression`\r\n\r\n* [Prior-based eigenanatomy](http://www.ncbi.nlm.nih.gov/pubmed/24852460) function `sparseDecom`\r\n\r\n\r\n## Installation from source\r\n```\r\nlibrary( devtools )\r\ninstall_github(\"stnava/cmaker\")\r\ninstall_github(\"stnava/ITKR\")\r\ninstall_github(\"stnava/ANTsR\")\r\n```\r\n\r\nthis assumes you have [git](http://git-scm.com/) installed / accessible in your environment, as well as a compiler, preferably `clang`.\r\n\r\nwindows users should see [Rtools](http://cran.r-project.org/bin/windows/Rtools/) and maybe, also, [installr](https://github.com/talgalili/installr) for assistance in setting up their environment for building (must have a compiler too)\r\n\r\n\r\n## Install from command line\r\n\r\nFirst, clone the repository:\r\n```sh\r\n$ git clone https://github.com/stnava/ITKR.git\r\n$ git clone https://github.com/stnava/ANTsR.git\r\n```\r\n\r\nInstall the package as follows:\r\n```sh\r\n$ R CMD INSTALL ITKR\r\n$ R CMD INSTALL ANTsR\r\n```\r\n\r\n### R dependencies\r\nYou may need to install R packages that ANTsR requires. For example:\r\n```\r\ninstall.packages(pkgs = c(\"Rcpp\", \"tools\", \"methods\"), dependencies = TRUE);\r\n```\r\nThese dependencies are subject to change until development is stable.\r\nYou can gain additional functionality by installing packages that\r\nare listed in the [`DESCRIPTION` file](https://github.com/stnava/ANTsR/blob/master/DESCRIPTION) under `Suggests`.\r\n\r\nThe [`travis.yml` file](https://github.com/stnava/ANTsR/blob/master/.travis.yml) also shows a way to install from Linux command line.\r\n\r\n## Usage\r\nLoad the package:\r\n```\r\nlibrary(ANTsR)\r\n```\r\nList the available functions in the namespace ANTsR:\r\n```\r\nANTsR::<double-tab>\r\n```\r\n\r\nCall help on a function via ?functionName or see function arguments\r\nvia  `args(functionName)`\r\n\r\n## Overview of ANTsR functionality and useful tools\r\n\r\nIf nothing else, ANTsR makes it easy to read and write medical images\r\nand to map them into a format compatible with R.\r\n\r\n**Read, write, access an image**\r\n```\r\nmnifilename<-getANTsRData(\"mni\")\r\nimg<-antsImageRead(mnifilename)\r\nantsImageWrite(img,mnifilename)\r\nantsGetSpacing(img)\r\nantsGetDirection(img)\r\nantsGetOrigin(img)\r\nprint(antsGetPixels(img,50,60,44))\r\nprint(max(img))\r\n```\r\n\r\n**Index an image with a label**\r\n```\r\ngaussimg<-array( data=rnorm(125), dim=c(5,5,5))\r\narrayimg<-array( data=(1:125), dim=c(5,5,5))\r\nimg<-as.antsImage( arrayimg )\r\nprint( max(img) )\r\nprint( mean(img[ img > 50  ]))\r\nprint( max(img[ img >= 50 & img <= 99  ]))\r\nprint( mean( gaussimg[ img >= 50 & img <= 99  ]) )\r\n```\r\n\r\n**Convert a 4D image to a matrix**\r\n```\r\ngaussimg<-array( data=rnorm(125*10), dim=c(5,5,5,10))\r\ngaussimg<-as.antsImage(gaussimg)\r\nprint(dim(gaussimg))\r\nmask<-getAverageOfTimeSeries( gaussimg )\r\nvoxelselect <- mask < 0\r\nmask[ voxelselect  ]<-0\r\nmask[ !voxelselect  ]<-1\r\ngmat<-timeseries2matrix( gaussimg, mask )\r\nprint(dim(gmat))\r\n```\r\n\r\n**Convert a list of images to a matrix**\r\n\r\n```\r\nnimages<-100\r\nilist<-list()\r\nfor ( i in 1:nimages )\r\n{\r\n  simimg<-makeImage( c(50,50) , rnorm(2500) )\r\n  simimg<-smoothImage(simimg,1.5)\r\n  ilist[i]<-simimg\r\n}\r\n# get a mask from the first image\r\nmask<-getMask( ilist[[1]],\r\n  lowThresh=mean(ilist[[1]]), cleanup=TRUE )\r\nmat<-imageListToMatrix( ilist, mask )\r\nprint(dim(mat))\r\n```\r\n\r\n**Do fast statistics on a big matrix**\r\n\r\nOnce we have a matrix representation of our population, we\r\nmight run a quick voxel-wise regression within the mask.  \r\nThen we look at some summary statistics.\r\n```\r\nmat<-imageListToMatrix( ilist, mask )\r\nage<-rnorm( nrow(mat) ) # simulated age\r\ngender<-rep( c(\"F\",\"M\"), nrow(mat)/2 ) # simulated gender\r\n# this creates \"real\" but noisy effects to detect\r\nmat<-mat*(age^2+rnorm(nrow(mat)))\r\nmdl<-lm( mat ~ age + gender )\r\nmdli<-bigLMStats( mdl, 1.e-4 )\r\nprint(names(mdli))\r\nprint(rownames(mdli$beta.t))\r\nprint(paste(\"age\",min(p.adjust(mdli$beta.pval[1,]))))\r\nprint(paste(\"gen\",min(p.adjust(mdli$beta.pval[2,]))))\r\n```\r\n\r\n\r\n**Write out a statistical map**\r\n\r\nWe might also write out the images so that we can save them for later\r\nor look at them with other software.\r\n```\r\nagebetas<-makeImage( mask , mdli$beta.t[1,] )\r\nantsImageWrite( agebetas, tempfile(fileext ='.nii.gz') )\r\n```\r\n\r\n**Neighborhood operations**\r\n\r\nImages neighborhoods contain rich shape and texture information.  \r\nWe can extract neighborhoods for further analysis at a given scale.\r\n```\r\nmnit<-getANTsRData(\"mni\")\r\nmnit<-antsImageRead(mnit)\r\nmnit <- resampleImage( mnit , rep(4, mnit@dimension) )\r\nmask2<-getMask(mnit,lowThresh=mean(mnit),cleanup=TRUE)\r\nradius <- rep(2,mnit@dimension)\r\nmat2<-getNeighborhoodMatrix(mnit, mask2, radius,\r\n  physical.coordinates = FALSE,\r\n  boundary.condition = \"mean\" )\r\n```\r\nThe `boundary.condition` says how to treat data that is outside of the mask\r\nor the image boundaries.  Here, we replace this data with the mean\r\nin-mask value of the local neighborhood.\r\n\r\n**Eigenanatomy & SCCAN**\r\n\r\nImages often have many voxels ($p$-voxels) and,\r\nin medical applications, this means that $p>n$ or even $p>>n$, where $n$ is\r\nthe number of subjects.\r\nTherefore, we often want to \"intelligently\" reduce the dimensionality of the\r\ndata.  However, we want to retain spatial locality. This is the point of\r\n\"eigenanatomy\" which is a variation of sparse PCA that uses (optionally)\r\nbiologically-motivated smoothness, locality or sparsity constraints.\r\n```\r\n# assume you ran the population example above\r\neanat<-sparseDecom( mat, mask, 0.2, 5, cthresh=2, its=2 )\r\neseg<-eigSeg(mask,eanat$eig,F)\r\njeanat<-joinEigenanatomy(mat,mask,eanat$eig, c(0.1))\r\neseg2<-eigSeg(mask,jeanat$fusedlist,F)\r\n```\r\nThe parameters for the example above are set for fast processing.\r\nYou can see our paper for some theory on these methods[@Kandel2014a].\r\n\r\nMore information is available within the examples that can be seen within\r\nthe help for `sparseDecom`, `sparseDecom2` and the helper function\r\n`initializeEigenanatomy`. You might also\r\nsee the [sccan tutorial](http://stnava.github.io/sccanTutorial/).\r\n\r\n**Other useful tools**\r\n```\r\n?iMath\r\n?ThresholdImage\r\n?quantifyCBF\r\n?antsPreprocessfMRI\r\n?aslPerfusion\r\n?computeDVARS\r\n?getROIValues\r\n?hemodynamicRF\r\n?inspectImageData3D\r\n?makeGraph\r\n?matrixToImages\r\n?antsRegistration\r\n?plotPrettyGraph\r\n?plotBasicNetwork\r\n?getTemplateCoordinates\r\n?antsSet*\r\n```\r\n\r\nParts of `ImageMath` from ANTs are accessible via\r\n```\r\n?iMath\r\n```\r\n\r\nfor more fMRI focused tools, see [RKRNS](http://stnava.github.io/RKRNS/) and its\r\ngithub site [github RKRNS](https://github.com/stnava/RKRNS).\r\n\r\nA good visualization alternative is [antsSurf](https://github.com/stnava/antsSurf).\r\n\r\n## Direct access to ANTs tools\r\n\r\nAlternatively, one can use any function in the namespace by providing arguments exactly same as one provides to the corresponding command-line version.\r\n\r\nFor example, to call the antsRegistration routine:\r\n```\r\nANTsR::antsRegistration( \"-d\", \"2\", \"-m\", \"mi[r16slice.nii.gz,r64slice.nii.gz,1,20,Regular,0.05]\", \"-t\", \"affine[1.0]\", \"-c\", \"2100x1200x1200x0\", \"-s\", \"3x2x1x0\", \"-f\", \"4x3x2x1\",\"-u\", \"1\", \"-o\", \"[xtest,xtest.nii.gz,xtest_inv.nii.gz]\" )\r\n\r\nANTsR::antsRegistration( \"-d\", \"2\", \"-m\", \"mi[r16slice.nii.gz,r64slice.nii.gz,1,20,Regular,0.05]\", \"-t\", \"affine[1.0]\", \"-c\", \"2100x1200x1200x0\", \"-s\", \"3x2x1x0\", \"-f\", \"4x3x2x1\", \"-m\", \"cc[r16slice.nii.gz,r64slice.nii.gz,1,4]\", \"-t\", \"syn[5.0,3,0.0]\", \"-i\", \"100x100x0\", \"-s\", \"2x1x0\", \"-f\", \"3x2x1\", \"-u\", \"1\", \"-o\", \"[xtest,xtest.nii.gz,xtest_inv.nii.gz]\" )\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}