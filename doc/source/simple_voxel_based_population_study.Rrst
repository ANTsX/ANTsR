Tutorial population study using the script simple_voxel_based_analysis.R
=========================

This example shows how to run a basic linear regression study across a population of image measurements.

Load libraries.

.. {r step1,eval=TRUE,warning=FALSE,results='hide',message=FALSE}
library(knitr)
library(ANTsR)
.. ..

Define the normalized image cohort and image mask.

.. {r step2,eval=TRUE,warning=FALSE,results='hide',message=FALSE}

controlFileNames <- list.files( path = "../../", pattern =
  glob2rx( "phantomtemplate_CONTROL*" ), full.names = TRUE, recursive = TRUE )
experimentalFileNames <- list.files( path = "../../", pattern =
  glob2rx( "phantomtemplate_EXP*" ), full.names = TRUE, recursive = TRUE )
images <- c( controlFileNames, experimentalFileNames )
mask <- '../../demo/example_images/phantomtemplate_mask.nii.gz'

Assign cohort (diagnosis) predictor and assign a random age to simulated images.

.. {r step3,eval=TRUE,warning=FALSE,results='hide',message=FALSE}

diagnosis <- c( rep( 1, length( controlFileNames ) ), rep( 0, length( experimentalFileNames ) ) )
age <- runif( length( diagnosis ), 25, 30 )

Specify output path for statistical maps.

.. {r step4,eval=TRUE,warning=FALSE,results='hide',message=FALSE}

outputPath <- "../../test_output/"

Perform a simple voxelwise t-test.

.. {r step5,eval=TRUE,warning=FALSE,results='hide',message=FALSE}

prefix <- "ANTsR_t.test_"
simple_voxel_based_analysis( dimensionality = 2, imageFileNames = images,
  predictors = data.frame( diagnosis ),
  maskFileName = mask,
  outputPrefix = paste( outputPath, prefix, sep = '' ), testType = 'student.t' )

Overlay the beta-image on the template to see areas with high t-statistic ( greater than 2 , less than 6 ).

.. {r step5,eval=TRUE,warning=FALSE,results='hide',message=FALSE}
plotANTsImage( myantsimage = antsImageRead( maskfn, 2 ), functional = betaimg, threshold="2x6", color = "red", axis = 1 )
 d
Finally, test the output for correctness.

.. {r testcorrectness}
if (  isucceed ) print("SUCCESS")
if ( !isucceed ) print("FAILURE")
.. ..














mydim <- 2
#' define prefix for output files
outpre <- "TEST"
#' get the images
glb <- glob2rx(paste("phantom*bian.nii.gz", sep = ""))
fnl <- list.files(path = "../../", pattern = glb, full.names = T, recursive = T)
maskfn <- "phantomtemplate.jpg"
#' get the mask , should be in same space as image
glb <- glob2rx(paste(maskfn, sep = ""))
maskfn <- list.files(path = "../../", pattern = glb, full.names = T, recursive = T)
mask <- antsImageRead(maskfn, mydim)
#' get regions of mask according to logical comparisons
logmask <- (mask > 120 & mask < 130)
notlogmask <- (!logmask)
#' make sure it holds zeroes
mask[logmask]    <- 1
mask[notlogmask] <- 0
# fill holes
ImageMath('2',mask,"FillHoles",mask)
.. ..

Take a quick look at the input template and mask.

.. {r step3,eval=TRUE,warning=FALSE,results='hide',message=FALSE}
# image(as.array(antsImageRead(maskfn,  mydim))) # alternative approach
plotANTsImage(myantsimage=antsImageRead(maskfn, mydim))
plotANTsImage(myantsimage=mask)
.. ..

Now collect the results in a matrix and do the statistics.

We also write out a few results using antsImageWrite.

.. {r step4,eval=TRUE,warning=FALSE,results='hide',message=FALSE}
#' count voxels and create matrix to hold image data
nvox <- sum(c(logmask))
mat <- matrix(length(fnl) * nvox, nrow = length(fnl), ncol = nvox)
for (i in 1:length(fnl)) {
    i1 <- antsImageRead(fnl[i], mydim)
    vec <- i1[logmask]
    mat[i, ] <- vec
}
#' identify your predictors and use in regression
predictor <- c(rep(2, 4), rep(1, 4))
#' the regression for your study
testformula <- (vox ~ 1 + predictor)
betavals <- rep(NA, nvox)
pvals <- rep(NA, nvox)
ntst <- 1
#' there are better/faster ways but this is simple
while (ntst < (nvox + 1)) {
    vox <- mat[, ntst]
    summarymodel <- summary(lm(testformula))
    #' get the t-vals for this predictor and write to an image
    betavals[ntst] <- summarymodel$coef[2, 3]
    #' get the beta for this predictor and write to an image
    pvals[ntst] <- summarymodel$coef[2, 4]
    ntst <- ntst + 1
}
betaimg <- antsImageClone(mask)
betaimg[logmask] <- betavals
antsImageWrite(betaimg, paste(outpre, "_beta.nii.gz", sep = ""))
.. ..


Now let's visualize the histogram of the corrected p-values ( the q-values ).

.. {r rst-plot, out.width='720px', fig.cap='Histogram of q-values'}
qvals<-p.adjust(pvals,method="BH")
sigct<-round( sum( qvals < 0.05 ) / sum( logmask ) * 100 )
isucceed<-FALSE
if ( sigct == 60 ) isucceed<-TRUE
library(ggplot2)
qdata<-data.frame(qvals)
m <- ggplot(qdata, aes(x=qvals))
m + geom_histogram(aes(y = ..density..),binwidth=0.05,colour="black",fill="white") + geom_density(alpha=.2, fill="#FF6666")
.. ..

Overlay the beta-image on the template to see areas with high t-statistic ( greater than 2 , less than 6 ).

.. {r step5,eval=TRUE,warning=FALSE,results='hide',message=FALSE}
plotANTsImage(myantsimage=antsImageRead(maskfn, mydim),functional=betaimg,threshold="2x6",color="red",axis=1)
.. ..

Finally, test the output for correctness.

.. {r testcorrectness}
if (  isucceed ) print("SUCCESS")
if ( !isucceed ) print("FAILURE")
.. ..
