% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/zzz_Math.R
\name{antsImage-math}
\alias{antsImage-math}
\alias{Math,antsImage-method}
\alias{abs,antsImage-method}
\alias{sign,antsImage-method}
\alias{sqrt,antsImage-method}
\alias{ceiling,antsImage-method}
\alias{round,antsImage-method}
\alias{floor,antsImage-method}
\alias{trunc,antsImage-method}
\alias{log,antsImage-method}
\alias{log10,antsImage-method}
\alias{log2,antsImage-method}
\alias{acos,antsImage-method}
\alias{asin,antsImage-method}
\alias{atan,antsImage-method}
\alias{acosh,antsImage-method}
\alias{asinh,antsImage-method}
\alias{atanh,antsImage-method}
\alias{cos,antsImage-method}
\alias{sin,antsImage-method}
\alias{tan,antsImage-method}
\alias{cosh,antsImage-method}
\alias{sinh,antsImage-method}
\alias{tanh,antsImage-method}
\alias{cospi,antsImage-method}
\alias{sinpi,antsImage-method}
\alias{tanpi,antsImage-method}
\alias{exp,antsImage-method}
\alias{gamma,antsImage-method}
\alias{lgamma,antsImage-method}
\alias{!,antsImage-method}
\title{Math for antsImage Objects}
\usage{
\S4method{Math}{antsImage}(x)

\S4method{abs}{antsImage}(x)

\S4method{sign}{antsImage}(x)

\S4method{sqrt}{antsImage}(x)

\S4method{ceiling}{antsImage}(x)

\S4method{round}{antsImage}(x)

\S4method{floor}{antsImage}(x)

\S4method{trunc}{antsImage}(x)

\S4method{log}{antsImage}(x, base = exp(1))

\S4method{log10}{antsImage}(x)

\S4method{log2}{antsImage}(x)

\S4method{acos}{antsImage}(x)

\S4method{asin}{antsImage}(x)

\S4method{atan}{antsImage}(x)

\S4method{acosh}{antsImage}(x)

\S4method{asinh}{antsImage}(x)

\S4method{atanh}{antsImage}(x)

\S4method{cos}{antsImage}(x)

\S4method{sin}{antsImage}(x)

\S4method{tan}{antsImage}(x)

\S4method{cosh}{antsImage}(x)

\S4method{sinh}{antsImage}(x)

\S4method{tanh}{antsImage}(x)

\S4method{cospi}{antsImage}(x)

\S4method{sinpi}{antsImage}(x)

\S4method{tanpi}{antsImage}(x)

\S4method{exp}{antsImage}(x)

\S4method{gamma}{antsImage}(x)

\S4method{lgamma}{antsImage}(x)

\S4method{!}{antsImage}(x)
}
\arguments{
\item{x}{is an object of class \code{antsImage}.}

\item{base}{a positive or complex number: 
the base with respect to which logarithms are computed. 
Defaults to e=exp(1).}
}
\description{
Overloaded math for antsImage objects
}
\examples{
img01 <- as.antsImage(array(1:64, c(4,4,4,1)))
testthat::expect_true(is.antsImage(abs(img01)))
testthat::expect_true(is.antsImage(sign(img01)))
testthat::expect_true(is.antsImage(sqrt(img01)))
testthat::expect_true(is.antsImage(ceiling(img01)))
testthat::expect_true(is.antsImage(floor(img01)))
testthat::expect_true(is.antsImage(trunc(img01)))
img01 <- as.antsImage(array(1:64, c(4,4,4,1)))
testthat::expect_true(is.antsImage(log(img01)))
testthat::expect_true(is.antsImage(exp(img01)))

testthat::expect_true(is.antsImage(log(img01, base = exp(1)))) 
testthat::expect_true(is.antsImage(log(img01, base = 2))) 
testthat::expect_true(is.antsImage(log(img01, base = 10))) 
testthat::expect_true(is.antsImage(log10(img01)))
testthat::expect_true(is.antsImage(log2(img01)))

testthat::expect_true(is.antsImage(gamma(img01)))
testthat::expect_true(is.antsImage(lgamma(img01)))

testthat::expect_true(is.antsImage(cos(img01)))
testthat::expect_true(is.antsImage(cospi(img01)))
testthat::expect_true(is.antsImage(acos(img01)))
testthat::expect_true(is.antsImage(acosh(img01)))

testthat::expect_true(is.antsImage(sin(img01)))
testthat::expect_true(is.antsImage(sinpi(img01)))
testthat::expect_true(is.antsImage(asin(img01)))
testthat::expect_true(is.antsImage(asinh(img01)))

testthat::expect_true(is.antsImage(tan(img01)))
testthat::expect_true(is.antsImage(tanpi(img01)))
testthat::expect_true(is.antsImage(atan(img01)))
testthat::expect_true(is.antsImage(atanh(img01)))
}
