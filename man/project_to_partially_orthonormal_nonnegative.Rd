% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/multiscaleSVDxpts.R
\name{project_to_partially_orthonormal_nonnegative}
\alias{project_to_partially_orthonormal_nonnegative}
\title{Project Non-Negative Matrix with Controllable Orthonormality}
\usage{
project_to_partially_orthonormal_nonnegative(
  X,
  max_iter = 100,
  tol = 1e-04,
  constraint = "positive",
  ortho_strength = 1
)
}
\arguments{
\item{X}{A square or rectangular numeric matrix with non-negative entries.}

\item{max_iter}{Maximum number of iterations for the alternating projection.}

\item{tol}{Tolerance for convergence (Frobenius norm of change).}

\item{constraint}{'positive' or 'either' (influences initial data preprocessing).}

\item{ortho_strength}{A value between 0 and 1, controlling the degree of
orthonormality enforced. 0 means no orthonormality
enforcement (only non-negativity), 1 means full
orthonormality.}
}
\value{
A matrix Y that is non-negative and has columns that are
        controlled in their orthonormality by ortho_strength.
}
\description{
Iteratively projects a non-negative matrix towards the intersection
             of non-negative matrices and matrices with orthonormal columns.
             Allows control over the degree of orthonormality enforced.
}
\examples{
# Example matrix (non-negative)
X_sample <- matrix(c(
  1, 2, 0.1,
  0.5, 1, 0.8,
  0.2, 0.5, 1
), nrow=3, byrow=TRUE)

# Full orthonormality (ortho_strength = 1)
Y_full_ortho <- project_to_partially_orthonormal_nonnegative(X_sample, ortho_strength = 1, max_iter = 200)
print(paste("Defect (strength=1):", invariant_orthogonality_defect(Y_full_ortho)))

# No orthonormality enforcement (ortho_strength = 0) - should just be pmax(X, 0)
Y_no_ortho <- project_to_partially_orthonormal_nonnegative(X_sample, ortho_strength = 0, max_iter = 20) # Low iter for speed
print(paste("Defect (strength=0):", invariant_orthogonality_defect(Y_no_ortho)))

# Intermediate strength
Y_mid_ortho <- project_to_partially_orthonormal_nonnegative(X_sample, ortho_strength = 0.5, max_iter = 200)
print(paste("Defect (strength=0.5):", invariant_orthogonality_defect(Y_mid_ortho)))

}
