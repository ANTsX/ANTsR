% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/multiscaleSVDxpts.R
\name{optimize_indicator_matrix}
\alias{optimize_indicator_matrix}
\title{Optimize Binary Indicator Matrix with Row Uniformity}
\usage{
optimize_indicator_matrix(
  m,
  max_iter = 1000,
  tol = 1e-06,
  preprocess = TRUE,
  verbose = FALSE
)
}
\arguments{
\item{m}{A numeric matrix to optimize.}

\item{max_iter}{The maximum number of iterations to avoid infinite loops. Default is 1000.}

\item{tol}{A numeric value representing the tolerance for convergence. If the change in the 
objective function is less than this value, the loop stops. Default is 1e-6.}

\item{preprocess}{Logical. If TRUE, flips the sign of each row where the entries are predominantly negative.}

\item{verbose}{Logical. If TRUE, reports the objective value and convergence progress at each iteration.}
}
\value{
`m * I`
}
\description{
This function optimizes the sum of the matrix `m * I`, where `I` is a binary indicator matrix 
with the constraint that each column may have only one non-zero entry. It ensures that the distribution 
of 1's is uniform across rows, softens the constraint to avoid infinite loops, and includes an optional 
verbose output to report the progress of the optimization.
}
\examples{
set.seed(123)
m <- matrix(rnorm(500), nrow = 5)
result <- optimize_indicator_matrix(m, max_iter = 1000, tol = 1e-6, verbose = TRUE)
print(result)
}
