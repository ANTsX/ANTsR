% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ripmmarc.R
\name{ripmmarc}
\alias{ripmmarc}
\title{Rotation Invariant Patch-based Multi-Modality Analysis aRChitecture}
\usage{
ripmmarc(img, mask, patchRadius = 3, patchSamples = 1000,
  patchVarEx = 0.95, meanCenter = FALSE, canonicalFrame = NA,
  evecBasis = NA, rotationInvariant = TRUE, regressProjections = TRUE,
  verbose = FALSE)
}
\arguments{
\item{img}{Image to decompose}

\item{mask}{Binary mask defining regions in which to decompose.}

\item{patchRadius}{Scalar radius defining the patch size.}

\item{patchSamples}{Scalar defining the number of random patches to sample.}

\item{patchVarEx}{Scalar defining the target variance explained.  If this is
greater than one, then it defines the number of eigenvectors.  Otherwise, it
defines the target variance explained.}

\item{meanCenter}{boolean whether we mean center the patches.}

\item{canonicalFrame}{pass in an existing canonicalFrame.}

\item{evecBasis}{pass in an existing eigenvector basis.}

\item{rotationInvariant}{boolean sets whether patches are rotationInvariant.}

\item{regressProjections}{boolean return reconstruction parameters.}

\item{verbose}{boolean sets verbosity.}
}
\value{
list including the canonical frame, the matrix basis, the patches for
the full image, the projection coefficients for the full image, the
variance explained and a reconstructed image.
}
\description{
Patch-based and rotation invariant image decomposition.  This
is similar to patch-based dictionary learning in N-dimensions.  Warning:
there may be an overlow/underflow error in the C++ underlying this function
that appears to occur when insufficient \code{patchSamples} are selected.
}
\examples{

img <- antsImageRead( getANTsRData( "r16" ) )
msk <- getMask( img ) \%>\% iMath("ME",1)
lap = iMath( img, "Laplacian", 2 )
mskTestTrain = antsImageClone( msk )
mskTestTrain[1:128,1:256]=2
mskTestTrain = mskTestTrain * msk
pr = 2
nv = 15
ripped <- ripmmarc( img, thresholdImage(mskTestTrain,2,2), patchRadius=pr,
  patchSamples=5000, patchVarEx=nv, rotationInvariant = FALSE )
ipatches = ripped$imagePatchMat
ibasis   = scale( ripped$basisMat )
k = 2233
kk = lm( ipatches[k,] ~ t( ibasis[1:10,] ) )
rimg = ripmmarcBasisImage( ripped$canonicalFrame, ipatches[k,] )
# plot( rimg, doCropping=F )
bimg = ripmmarcBasisImage( ripped$canonicalFrame, ibasis[5,] )
# plot( bimg, doCropping=F )

rippedTest <- ripmmarc( img, thresholdImage(mskTestTrain,1,1), patchRadius=pr,
  evecBasis = ripped$basisMat, canonicalFrame = ripped$canonicalFrame,
  patchSamples=500, patchVarEx=nv, rotationInvariant = FALSE )
lapTrainVox = lap[ mskTestTrain == 2 ]
lapTestVox = lap[ mskTestTrain == 1 ]
mydftr = data.frame( lap=lapTrainVox, t1feats=ripped$evecCoeffs )
mydfte = data.frame( lap=lapTestVox, t1feats=rippedTest$evecCoeffs )
mdl = lm( lap ~ . , data = mydftr )
preds = predict( mdl, newdata = mydfte )
# cor.test( preds, mydfte$lap )

}
\author{
Kandel BM, Avants BB
}
