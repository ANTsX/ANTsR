% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/multiscaleSVDxpts.R, R/multiscaleSVDxpts_temp.R
\name{smoothAppGradCCA}
\alias{smoothAppGradCCA}
\title{cca via sparse smooth matrix prediction}
\usage{
smoothAppGradCCA(x, y, smoox = NA, smooy = NA,
  sparsenessQuantile = 0.5, positivity = "either", k = 2,
  iterations = 10, stochastic = NA, initialization = "randxy",
  verbose = FALSE)

smoothAppGradCCA(x, y, smoox = NA, smooy = NA,
  sparsenessQuantile = 0.5, positivity = "either", k = 2,
  iterations = 10, stochastic = NA, initialization = "randxy",
  verbose = FALSE)
}
\arguments{
\item{x}{input view 1 matrix}

\item{y}{input view 2 matrix}

\item{smoox}{smoothingMatrix for x}

\item{smooy}{smoothingMatrix for y}

\item{sparsenessQuantile}{quantile to control sparseness - higher is sparser}

\item{positivity}{restrict to positive or negative solution (beta) weights.
choices are positive, negative or either as expressed as a string.}

\item{k}{number of basis vectors to compute}

\item{iterations}{number of gradient descent iterations}

\item{stochastic}{size of subset to use for stocastic gradient descent}

\item{initialization}{type of initialization, currently only supports a
character \code{randxy}}

\item{verbose}{boolean option}

\item{x}{input view 1 matrix}

\item{y}{input view 2 matrix}

\item{smoox}{smoothingMatrix for x}

\item{smooy}{smoothingMatrix for y}

\item{sparsenessQuantile}{quantile to control sparseness - higher is sparser}

\item{positivity}{restrict to positive or negative solution (beta) weights.
choices are positive, negative or either as expressed as a string.}

\item{k}{number of basis vectors to compute}

\item{iterations}{number of gradient descent iterations}

\item{stochastic}{size of subset to use for stocastic gradient descent}

\item{initialization}{type of initialization, currently only supports a
character \code{randxy}}

\item{verbose}{boolean option}
}
\value{
list with matrices each of size p or q by k

list with matrices each of size p or q by k
}
\description{
This implements a sparse and graph-regularized version of CCA based on the
AppGrad style of implementation by Ma, Lu and Foster, 2015.

This implements a sparse and graph-regularized version of CCA based on the
AppGrad style of implementation by Ma, Lu and Foster, 2015.
}
\examples{

mat<-replicate(100, rnorm(20))
mat2<-replicate(100, rnorm(20))
mat<-scale(mat)
mat2<-scale(mat2)
wt<-0.666
mat3<-mat*wt+mat2*(1-wt)
jj = smoothAppGradCCA( mat, mat3 )


mat<-replicate(100, rnorm(20))
mat2<-replicate(100, rnorm(20))
mat<-scale(mat)
mat2<-scale(mat2)
wt<-0.666
mat3<-mat*wt+mat2*(1-wt)
jj = smoothAppGradCCA( mat, mat3 )

}
\author{
Avants BB

Avants BB
}
