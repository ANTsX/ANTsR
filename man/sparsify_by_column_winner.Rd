% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/multiscaleSVDxpts.R
\name{sparsify_by_column_winner}
\alias{sparsify_by_column_winner}
\title{Sparsify a Matrix via Column-wise Winner-Take-All}
\usage{
sparsify_by_column_winner(
  X,
  first_column_constraint = c("none", "either", "positive", "negative"),
  default_constraint = c("either", "positive", "negative"),
  ensure_row_membership = TRUE
)
}
\arguments{
\item{X}{A numeric matrix [p_features x k_components].}

\item{first_column_constraint}{How to treat the first column. One of:
\itemize{
  \item `"none"`: (Default) The first column is left dense (not sparsified).
  \item `"either"`: The entry with the largest absolute value is kept, regardless of sign.
  \item `"positive"`: The largest entry with a positive sign is kept.
  \item `"negative"`: The entry with the largest magnitude (most negative) with a negative sign is kept.
}}

\item{default_constraint}{How to treat all other columns (from the second
onwards). Takes the same options as `first_column_constraint`.
Defaults to `"either"`.}

\item{ensure_row_membership}{Logical. If TRUE, ensures every feature is
represented in at least one component by "reviving" the single most
significant entry for any row that becomes all-zero after sparsity.}
}
\value{
A sparsified matrix with the same dimensions as X.
}
\description{
This function applies a "winner-take-all" sparsity model. For each column,
it finds the single most significant entry based on specified sign constraints
and sets all other entries in that column to zero.
}
\details{
It includes special handling for the first column, which often represents a
main effect that may not require the same constraints as subsequent components.
}
\examples{
set.seed(123)
mat <- matrix(c(
  -5, 0.1, 0.2, 0.3, 0.4,    # Col 1: Large negative value
   1, 2.0, 0.1, 0.2, 0.3,    # Col 2: Large positive value
  -1, -0.2, -3, -0.4, -0.5, # Col 3: Only negative values
  1, -2, 3, -4, 5           # Col 4: Mixed signs
), nrow = 5, ncol = 4)

print("Original Matrix:")
print(round(mat, 2))

# Example 1: Default behavior. First col dense, others sparse by magnitude.
res1 <- sparsify_by_column_winner(mat)
print("Result 1: Default (first_col='none', default='either')")
print(round(res1, 2))

# Example 2: Forcing all columns to be sparse and positive-only.
# Note cols 1 and 3 become all zero because they have no positive values.
res2 <- sparsify_by_column_winner(mat, "positive", "positive")
print("Result 2: All columns sparse ('positive')")
print(round(res2, 2))

# Example 3: Forcing all columns to be sparse and negative-only.
res3 <- sparsify_by_column_winner(mat, "negative", "negative")
print("Result 3: All columns sparse ('negative')")
print(round(res3, 2))

}
