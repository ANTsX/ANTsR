@ 

\documentclass{article}
\usepackage{Sweave}
\usepackage{varioref}
\usepackage{flafter}
\usepackage{geometry}
\geometry{letterpaper,margin=1in}
\title{fMRI Processing Pipeline with ANTsR}
\author{}
\date{}
\begin{document}
\maketitle
\begin{abstract}
This is an example of the fMRI processing pipeline that can be created using ANTsR package. The following pipeline involves \emph{Motion Estimation}, \emph{Brain Extraction} and \emph{CompCorr}. ANTsR package contains scripts named \emph{ants\_motion\_estimation}, \emph{ants\_brain\_extraction}, \emph{ants\_compcorr} that perform these operations. This document shows the output of these operations on an example data.
\end{abstract}

Load the library. Some of programs in the package are peculiar in the sense that they only accept certain `types' of inputs and so make sure that program under consideration is fed the right type of images and matrices in all of the following commands.

<<echo=FALSE>>=

library(ANTsR)
@ 

\section{Motion Estimation}
Read the input image into an R object.

<<>>= 

img = antsImageRead( system.file( "demo/data/KKI2009-01-fMRI.nii" , package = "ANTsR" ) , "float" , 4 )
@

Create a buffer to hold the average image.

<<>>=

avg_img = new( "antsImage" , "float" , 3 )
@ 

Compute the average image by using `antsMotionCorr'. After the below command, the object `avg\_img' will hold the resulting average image. `antsMotionCorr' accepts a named list of arguments as shown.

<<>>=

antsMotionCorr( list( d = 3 , a = img , o = avg_img ) )
@

To perform motion correction, create a buffer for the motion corrected image and a buffer for resulting motion correction parameters.

<<>>=

moco_img = new( "antsImage" , "float" , 4 )
moco_params = new( "antsMatrix" , "double" )
@

Motion correction using rigid registration.

<<>>= 

antsMotionCorr( list( d = 3 , o = list( moco_params , moco_img , avg_img ) , m = list( name = "MI" , avg_img , img , 1 , 32 , 50 ) , t = "Rigid[0.01]" , i = 25 , u = 1 , e = 1 , s = 0 , f = 1 , n = 25 ) )
@ 

Motion corrected image and motion correction parameters have been written to the corresponding objects. One may write the images on to the disk and read them using the the package \emph{oro.nifti} as follows.

<<>>= 

antsImageWrite( moco_img , "KKI2009-01-fMRI_moco.nii" )
antsImageWrite( avg_img , "KKI2009-01-fMRI_avg.nii" )
library(oro.nifti)
img_oro = readNIfTI( system.file( "demo/data/KKI2009-01-fMRI.nii" , package = "ANTsR" ) )
img_oro
descrip( img_oro )
avg_img_oro = readNIfTI( "KKI2009-01-fMRI_avg.nii" )
avg_img_oro
moco_img_oro = readNIfTI( "KKI2009-01-fMRI_moco.nii" )
moco_img_oro
@

Display the orthographic view of the images at an intant of time. Figure \vref{img} , figure \vref{avgimg} and figure \vref{mocoimg} show the command and its result.
\begin{figure}
\centering

<<fig=TRUE>>= 

orthographic( img_oro , w = 1 )
@

\caption{original image (img) at time w = 1}
\label{img}
\end{figure}
\begin{figure}
\centering

<<fig=TRUE>>= 

orthographic( avg_img_oro , w = 1 )
@

\caption{average image (avg_img) at time w = 1}
\label{avgimg}
\end{figure}
\begin{figure}
\centering

<<fig=TRUE>>= 

orthographic( moco_img_oro , w = 1 )
@

\caption{motion-corrected image (moco_img) at time w = 1}
\label{mocoimg}
\end{figure}
Motion estimation step also wrote the metric results into the object `moco\_params' which can be converted to a `data.frame' and plotted as shown in figure \vref{metricresults}.
\begin{figure}
\centering

<<fig=TRUE>>=

plot( as.data.frame( moco_params )$MetricPost , type = "l" , main = "Motion Estimation: Metric Results" , xlab = "time" , ylab = "metric" ) 
@

\caption{plot of the metric results}
\label{metric_results}
\end{figure}

\section{Brain Extraction}
Create a buffer to hold the brainmask image.

<<>>= 

bm_img = new( "antsImage" , "float" , 3 )
@ 

Perform brain-extraction using the average image computed above as follows.

<<>>= 

ThresholdImage( 3 , avg_img , bm_img , "Otsu" , 3 )
ThresholdImage( 3 , bm_img , bm_img , 2 , 3 )
ImageMath( 3 , bm_img , "ME" , bm_img , 1 )
ImageMath( 3 , bm_img , "GetLargestComponent" , bm_img )
ImageMath( 3 , bm_img , "MD" , bm_img , 1 )
ImageMath( 3 , bm_img , "ME" , bm_img , 1 )
@

The brain-extraction step wrote the brainmask image to object `bm\_img'. Read it and display it as shown in figure \vref{bmimg}.

<<>>= 

antsImageWrite( bm_img , "KKI2009-01-fMRI_avg_brainmask.nii" )
bm_img_oro = readNIfTI( "KKI2009-01-fMRI_avg_brainmask.nii" )
bm_img_oro
@

\begin{figure}
\centering

<<fig=TRUE>>=

orthographic( bm_img_oro , w = 1 )
@

\caption{brainmask image (bm_img|bm_img_oro) at time w=1}
\label{bmimg}
\end{figure}

\section{CompCorr}
Create buffer to hold compcorr corrected and comcorr variance images.

<<>>= 

compcorr_corr_img = new( "antsImage" , "float" , 4 )
compcorr_var_img = new( "antsImage" , "float" , 3 )
@

Peform \emph{compcorr} using the following commands.

<<>>= 

ImageMath( 4 , antsImagePair( compcorr_corr_img , compcorr_var_img ) , "CompCorrAuto" , moco_img , bm_img , 6 )
N3BiasFieldCorrection( 3 , avg_img , avg_img , 2 , bm_img )
N3BiasFieldCorrection( 3 , avg_img , avg_img , 1 , bm_img )
N3BiasFieldCorrection( 3 , avg_img , avg_img , 1 , bm_img )
N3BiasFieldCorrection( 3 , avg_img , avg_img , 1 , bm_img )
@

The next command `Atropos' requires its input mask image to be of pixeltype `unsigned int' and so clone the required image (bm\_img in this case) accordingly. Also create a buffer for segmented image.

<<>>=

bm_img_uint = antsImageClone( bm_img , "unsigned int" )
seg_img_uint = new( "antsImage" , "unsigned int" , 3 )
@

Perform Atropos segmentation as follows.

<<>>=

Atropos( list( d = 3 , a = avg_img , a = compcorr_var_img , m = "[0.3,1x1x1]" , o = seg_img_uint , c = "[5,0]" , i = "kmeans[3]" , x = bm_img_uint ) )
@

The following commands exercise other options to `Atropos'.

<<>>=

prob_img_list = new( "antsImageList" , "float" , 3 )
Atropos( list( d = 3 , a = avg_img , a = compcorr_var_img , m = "[0.3,1x1x1]" , o = list( seg_img_uint , prob_img_list ) , c = "[5,0]" , i = "kmeans[3]" , x = bm_img_uint ) )
Atropos( list( d = 3 , a = avg_img , a = compcorr_var_img , m = "[0.3,1x1x1]" , o = list( seg_img_uint , prob_img_list ) , c = "[5,0]" , i = list( name = "priorprobabilityimages" , 3 , prob_img_list , 0 ) , x = bm_img_uint ) )
@

Rest of `compcorr' using `sccan'.

<<>>=

seg_img_float = antsImageClone( seg_img_uint , "float" )
cortmask_img = new( "antsImage" , "float" , 3 )
ThresholdImage( 3 , seg_img_float , cortmask_img , 2 , 2 )
cortmask_img_double = antsImageClone( cortmask_img , "double" )
moco_img_double = antsImageClone( moco_img , "double" )
mat = new( "antsMatrix" , "double" )
sccan( list( "timeseriesimage-to-matrix" = list( moco_img_double , cortmask_img_double , 0.0 , 0.0  ) , o = mat ) )
filt_mat_df = antsr_frequency_filter( values = as.data.frame(mat) , tr = 0.15 , freqLo = 0.03 , freqHi = 0.1 )
filt_mat_df = as.data.frame( filt_mat_df )
filt_mat = as.antsMatrix( filt_mat_df , "double" )
mat1 = new( "antsMatrix" , "double" )
mat2 = new( "antsMatrix" , "double" )
imglist = new( "antsImageList" , "double" , 3 )
sccan( list( svd = list( name = "sparse" , filt_mat , cortmask_img_double , -0.15 ) , n = 40 , i = 40 , PClusterThresh = 50 , o = list( mat1 , imglist , mat2 ) ) )
@

\end{document}
